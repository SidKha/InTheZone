#pragma config(Motor,  port2,           arm_LMotor1,   tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port3,           arm_LMotor2,   tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port4,           arm_RMotor1,   tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port5,           arm_RMotor2,   tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port6,           leftFMotor,      tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port7,           rightFMotor,      tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port8,           leftBMotor,      tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port9,           rightBMotor,      tmotorVex393_MC29, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

int Channel3;
int Channel4;
int threshold = 10;

void deadZoneCheck()
{
 
    if(abs(vexRT[Ch3]) > threshold)
        Channel3 = vexRT[Ch3];
    else
        Channel3 = 0;
    if(abs(vexRT[Ch4]) > threshold)
        Channel4 = vexRT[Ch4];
    else
        Channel4 = 0;
}

task main()
{
	while (true){

		motor[arm_LMotor1] = vexRT[Ch2];
		motor[arm_LMotor2] = vexRT[Ch2];
		motor[arm_RMotor1] = vexRT[Ch2];
		motor[arm_RMotor2] = vexRT[Ch2];
		
		deadZoneCheck();
		motor[leftFMotor]  = (Channel3 + Channel4)/2;  // (y + x)/2
 	 	motor[leftBMotor]  = (Channel3 + Channel4)/2;  // (y + x)/2
 	 	motor[rightFMotor] = (Channel3 - Channel4)/2;  // (y - x)/2
 	 	motor[rightBMotor] = (Channel3 - Channel4)/2;  // (y - x)/2
	}
		
}
